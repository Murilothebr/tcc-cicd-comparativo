name: ci-dotnet

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_REPO }}
  SOLUTION_PATH: src/Api.sln

jobs:
  build-test-image-scan-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/*.sln
            **/Directory.Packages.props
            **/nuget.config

      # (1) Restore
      - name: Restore
        run: dotnet restore "$SOLUTION_PATH"

      # (2) Build
      - name: Build
        run: dotnet build "$SOLUTION_PATH" --configuration Release --no-restore

      # (3) Test
      - name: Test
        run: dotnet test "$SOLUTION_PATH" --configuration Release --no-build --logger "trx;LogFileName=test-results.trx"

      # (4) Docker login
      - name: Docker login (Docker Hub)
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # (5) Build da imagem
      # Se o Dockerfile estÃ¡ na RAIZ: use -f Dockerfile e contexto '.'
      - name: Build Docker image
        run: |
          docker build -f Dockerfile -t $IMAGE_NAME:${{ github.sha }} .
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      # (6) Trivy scan (falha em HIGH/CRITICAL)
      - name: Trivy scan (image)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: "table"
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
          exit-code: "1"

      # (7) Push por SHA
      - name: Push image (SHA tag)
        run: docker push $IMAGE_NAME:${{ env.IMAGE_TAG }}

      # (8) latest apenas na main
      - name: Tag & push latest (main only)
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag $IMAGE_NAME:${{ env.IMAGE_TAG }} $IMAGE_NAME:github_latest
          docker push $IMAGE_NAME:latest

      # (9) Artefatos de teste
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-results
          path: "**/*.trx"
